fileTypes: [jscm]
foldingStartMarker: \(
foldingStopMarker: \)
keyEquivalent: ^~L
name: JavaSc(heme|ript)
patterns:
- {include: '#comment'}
- {include: '#definition'}
- {include: '#tests'}
- {include: '#require'}
- {include: '#expression'}
repository:
  _cond-block:
    patterns:
    - begin: (\[)\s*(else)\s
      beginCaptures:
        '1': {name: control.operator.bracket.cond.open.scheme.javasc-heme-ript}
        '2': {name: keyword.control}
      end: \]
      endCaptures:
        '0': {name: control.operator.bracket.cond.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#expression'}
    - begin: \[
      beginCaptures:
        '0': {name: control.operator.bracket.cond.open.scheme.javasc-heme-ript}
      end: \]
      endCaptures:
        '0': {name: control.operator.bracket.cond.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#comment'}
      - {include: '#expression'}
  _definition-block:
    patterns:
    - begin: \s*(\()\s*(?=\[)
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: entity.name.variable.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      name: meta.definition.block.scheme.javasc-heme-ript
      patterns:
      - {include: '#comment'}
      - {include: '#_definition-pair'}
  _definition-pair:
    patterns:
    - begin: (\[)([^\s\[\](){}|;#"',`]+)
      beginCaptures:
        '1': {name: control.operator.bracket.definition-pair.open.scheme.javasc-heme-ript}
        '2': {name: entity.name.variable.scheme.javasc-heme-ript}
      end: \]
      endCaptures:
        '0': {name: control.operator.bracket.definition-pair.close.scheme.javasc-heme-ript}
      name: meta.definition.variable.scheme.javasc-heme-ript
      patterns:
      - {include: '#comment'}
      - {include: '#expression'}
  _local-block:
    patterns:
    - begin: \[
      beginCaptures:
        '0': {name: control.operator.bracket.local.open.scheme.javasc-heme-ript}
      end: \]
      endCaptures:
        '0': {name: control.operator.bracket.local.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#comment'}
      - {include: '#definition'}
  _struct-block:
    patterns:
    - begin: (\[)([^\s\[\](){}|;#"',`]+)
      beginCaptures:
        '1': {name: control.operator.bracket.struct-block.open.scheme.javasc-heme-ript}
        '2': {name: entity.name.struct.scheme.javasc-heme-ript}
      contentName: variable.parameter.struct.scheme.javasc-heme-ript
      end: \]
      endCaptures:
        '0': {name: control.operator.bracket.struct-block.close.scheme.javasc-heme-ript}
  comment:
    patterns:
    - captures:
        '1': {name: punctuation.definition.comment.scheme.javasc-heme-ript}
      match: (#?;).*$\n?
      name: comment.line.semicolon.scheme.javasc-heme-ript
  definition:
    patterns:
    - begin: (\()(define)\s+(\()([^\s\[\](){}|;#"',`]+)((?>\s[^)]*|))(\))\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.function.scheme.javasc-heme-ript}
        '3': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '4': {name: entity.name.function.scheme.javasc-heme-ript}
        '5': {name: variable.parameter.function.scheme.javasc-heme-ript}
        '6': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      name: meta.definition.function.scheme.javasc-heme-ript
      patterns:
      - {include: '#expression'}
    - begin: (\()(define-macro)\s+(\()([^\s\[\](){}|;#"',`]+)\s([^)]*)(\))\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.macro.scheme.javasc-heme-ript}
        '3': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '4': {name: entity.name.macro.scheme.javasc-heme-ript}
        '5': {name: variable.parameter.macro.scheme.javasc-heme-ript}
        '6': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      name: meta.definition.macro.scheme.javasc-heme-ript
      patterns:
      - {include: '#expression'}
    - captures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.macro.scheme.javasc-heme-ript}
        '3': {name: entity.name.macro.scheme.javasc-heme-ript}
        '4': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      match: (\()(delete-macro)\s+([^\s\[\](){}|;#"',`]+)(\))
      name: meta.definition.macro.scheme.javasc-heme-ript
      patterns: false
    - begin: (\()(define-struct)\s+([^\s\[\](){}|;#"',`]+)\s+(\()
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.struct.scheme.javasc-heme-ript}
        '3': {name: entity.name.struct.scheme.javasc-heme-ript}
        '4': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
      contentName: variable.parameter.struct.scheme.javasc-heme-ript
      end: \)\)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      name: meta.definition.struct.scheme.javasc-heme-ript
    - begin: (\()(define-datatype)\s+([^\s\[\](){}|;#"',`]+)\s+
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.datatype.scheme.javasc-heme-ript}
        '3': {name: entity.name.datatype.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      name: meta.definition.datatype.scheme.javasc-heme-ript
      patterns:
      - {include: '#_struct-block'}
    - begin: (\()(define|set!)\s([^\s\[\](){}|;#"',`]+)\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.variable.scheme.javasc-heme-ript}
        '3': {name: entity.name.variable.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      name: meta.definition.variable.scheme.javasc-heme-ript
      patterns:
      - {include: '#expression'}
    - begin: (\()(define-macro)\s([^\s\[\](){}|;#"',`]+)\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.macro.scheme.javasc-heme-ript}
        '3': {name: entity.name.variable.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      name: meta.definition.macro.scheme.javasc-heme-ript
      patterns:
      - {include: '#expression'}
  expression:
    patterns:
    - {include: '#comment'}
    - captures:
        '2': {name: constant.numeric.scheme.javasc-heme-ript}
      match: (^|(?<=\s))(-?(0|[1-9]\d*)(\.\d+|/[1-9]\d*)?)\b
    - begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.scheme.javasc-heme-ript}
      end: (?<!\\)"
      endCaptures:
        '0': {name: punctuation.definition.string.end.scheme.javasc-heme-ript}
      name: string.quoted.double.scheme.javasc-heme-ript
      patterns:
      - {match: \\., name: constant.character.escape.scheme.javasc-heme-ript}
    - captures:
        '2': {name: constant.language.boolean.scheme.javasc-heme-ript}
      match: (^|(?<=[\s\[\](){}|;#"',`]))(true|false|\#t(rue)?|\#f(alse)?)($|(?=[\s\[\](){}|;#"',`]))
    - begin: \s*(\()(lambda)\s+(\()([^\[\](){}|;#"',`]*)(\))
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.lambda.scheme.javasc-heme-ript}
        '3': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '4': {name: variable.parameter.lambda.scheme.javasc-heme-ript}
        '5': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      name: meta.definition.lambda.scheme.javasc-heme-ript
      patterns:
      - {include: '#expression'}
    - begin: \s*(\()(lambda)\s+([^\s\[\](){}|;#"',`]+)
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.lambda.scheme.javasc-heme-ript}
        '3': {name: variable.parameter.lambda.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      name: meta.definition.lambda.scheme.javasc-heme-ript
      patterns:
      - {include: '#expression'}
    - begin: \s*(\()(begin|begin0|if|when|unless)\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: keyword.control.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#expression'}
    - begin: \s*(\()(local)\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: keyword.control.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#_local-block'}
      - {include: '#expression'}
    - begin: \s*(\()(letrec|let*|let|do)\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: keyword.control.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#_definition-block'}
      - {include: '#expression'}
    - begin: \s*(\()(recur|let)\s+([^\s\[\](){}|;#"',`]+)
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: keyword.control.scheme.javasc-heme-ript}
        '3': {name: entity.name.loop.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#_definition-block'}
      - {include: '#expression'}
    - begin: \s*(\()(cond)\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: keyword.control.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#_cond-block'}
    - begin: \s*(')(\()
      beginCaptures:
        '1': {name: keyword.control.quoting.scheme.javasc-heme-ript}
        '2': {name: control.operator.bracket.quoting.open.scheme.javasc-heme-ript}
      end: (\))\s*
      endCaptures:
        '1': {name: control.operator.bracket.quoting.close.scheme.javasc-heme-ript}
      name: entity.quoted.scheme.javasc-heme-ript
      patterns:
      - {include: '#quoted'}
    - begin: \s*(`)(\()
      beginCaptures:
        '1': {name: keyword.control.quoting.scheme.javasc-heme-ript}
        '2': {name: control.operator.bracket.quoting.open.scheme.javasc-heme-ript}
      end: (\))\s*
      endCaptures:
        '1': {name: control.operator.bracket.quoting.close.scheme.javasc-heme-ript}
      name: entity.quoted.quasi.scheme.javasc-heme-ript
      patterns:
      - {include: '#quasi-quoted'}
    - captures:
        '2': {name: support.constant.scheme.javasc-heme-ript}
      match: (^|(?<=[\s\[\](){}|;#"',`]))(void|empty)($|(?=[\s\[\](){}|;#"',`]))
    - captures:
        '1': {name: support.functions.scheme.javasc-heme-ript}
      match: (?<=\()(andmap|ormap|apply|compose|build-list|filter|map|foldl1?|foldr1?|for-each|procedure?)\s
    - captures:
        '1': {name: entity.name.function.call.scheme.javasc-heme-ript}
      match: (?<=\()([^\s\[\](){}|;#"',`]+)
    - begin: \s*(\()
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
      end: (\))\s*
      endCaptures:
        '1': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#expression'}
    - begin: \s*(\[)
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
      end: (\])\s*
      endCaptures:
        '1': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#expression'}
    - captures:
        '1': {name: keyword.control.quoting.scheme.javasc-heme-ript}
      match: ('|`)[^\s\[\](){}|;#"',`]+
      name: entity.quoted.scheme.javasc-heme-ript
  quasi-quoted:
    patterns:
    - begin: \s*(,@?)(\()
      beginCaptures:
        '1': {name: keyword.control.quoting.scheme.javasc-heme-ript}
        '2': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
      contentName: entity.expression.scheme.javasc-heme-ript
      end: (\))\s*
      endCaptures:
        '1': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#expression'}
    - captures:
        '1': {name: keyword.control.quoting.scheme.javasc-heme-ript}
        '2': {name: entity.expression.scheme.javasc-heme-ript}
      match: (,@?)([^\s\[\](){}|;#"',`]+)
    - begin: \s*(\()\s*
      end: \s*(\))\s*
      patterns:
      - {include: '#quasi-quoted'}
    - begin: \s*(\[)
      end: (\])\s*
      patterns:
      - {include: '#quasi-quoted'}
  quoted:
    patterns:
    - begin: \s*(\()
      end: (\))\s*
      patterns:
      - {include: '#quoted'}
    - begin: \s*(\[)
      end: (\])\s*
      patterns:
      - {include: '#quoted'}
  require:
    patterns:
    - begin: (\()(require)\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.require.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#expression'}
  tests:
    patterns:
    - begin: (\()(check-expect)\s
      beginCaptures:
        '1': {name: control.operator.bracket.open.scheme.javasc-heme-ript}
        '2': {name: storage.type.check-expect.scheme.javasc-heme-ript}
      end: \)
      endCaptures:
        '0': {name: control.operator.bracket.close.scheme.javasc-heme-ript}
      patterns:
      - {include: '#expression'}
scopeName: source.scheme.javasc-heme-ript
uuid: b9471bee-7dcb-4cfb-86f9-9cc89c0d6a67
